import os
import json
import string
import random
from cryptography.fernet import Fernet

# Generate a key for encryption
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)
    return key

# Load the previously generated key
def load_key():
    return open("secret.key", "rb").read()

# Encrypt a message
def encrypt_message(message, key):
    f = Fernet(key)
    encrypted_message = f.encrypt(message.encode())
    return encrypted_message

# Decrypt a message
def decrypt_message(encrypted_message, key):
    f = Fernet(key)
    decrypted_message = f.decrypt(encrypted_message).decode()
    return decrypted_message

# Generate a strong password
def generate_password(length=12):
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

# Save the password to a file
def save_password(service, username, password, key):
    encrypted_password = encrypt_message(password, key)
    if os.path.exists("passwords.json"):
        with open("passwords.json", "r") as file:
            passwords = json.load(file)
    else:
        passwords = {}

    passwords[service] = {
        "username": username,
        "password": encrypted_password.decode()
    }

    with open("passwords.json", "w") as file:
        json.dump(passwords, file)

# Retrieve a password from the file
def retrieve_password(service, key):
    with open("passwords.json", "r") as file:
        passwords = json.load(file)

    if service in passwords:
        encrypted_password = passwords[service]["password"]
        return passwords[service]["username"], decrypt_message(encrypted_password.encode(), key)
    else:
        return None, None

# Main interface
def main():
    if not os.path.exists("secret.key"):
        key = generate_key()
    else:
        key = load_key()

    while True:
        choice = input("Would you like to add a new password or retrieve an existing one? (add/retrieve/exit): ").lower()
        if choice == "add":
            service = input("Enter the service name: ")
            username = input("Enter the username: ")
            password = generate_password()
            save_password(service, username, password, key)
            print(f"Password for {service} generated and saved.")
        elif choice == "retrieve":
            service = input("Enter the service name: ")
            username, password = retrieve_password(service, key)
            if username and password:
                print(f"Username: {username}\nPassword: {password}")
            else:
                print("No password found for this service.")
        elif choice == "exit":
            break
        else:
            print("Invalid choice. Please choose 'add', 'retrieve', or 'exit'.")

if __name__ == "__main__":
    main()